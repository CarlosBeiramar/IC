% define 3 plates and 3 forks
sort Plate_id = struct p1 | p2 | p3;
	 Fork_id = struct f1 | f2 | f3;
	

%define functions 

map left_fork, right_fork: Plate_id -> Fork_id;

eqn 
	left_fork(p1) = f1;
	left_fork(p2) = f2;
	left_fork(p3) = f3;
	
	right_fork(p1) = f3;
	right_fork(p2) = f1;
	right_fork(p3) = f2;


act pick_fork,drop_fork: Plate_id # Fork_id;

	up_fork, down_fork, lock,free: Plate_id # Fork_id;

	eat: Plate_id;

proc 
	Plate (p: Plate_id) = (pick_fork(p,left_fork(p)) . pick_fork(p,right_fork(p))) + (pick_fork(p,right_fork(p)) . pick_fork(p,left_fork(p))) . eat(p).
						  (drop_fork(p,left_fork(p)) . drop_fork(p,right_fork(p))) + (drop_fork(p,right_fork(p)) . drop_fork(p,left_fork(p))) . Plate(p);


	Fork (f: Fork_id) = sum p: Plate_id . up_fork(p,f) . down_fork(p,f) . Fork(f);
 
init allow({lock,free,eat},comm({pick_fork|up_fork -> lock, drop_fork|down_fork -> free},
												 Plate(p1) || Plate(p2) || Plate(p3) || Fork(f1) || Fork(f2) || Fork(f3)));










